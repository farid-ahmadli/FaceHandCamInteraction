/************** Carousel Class *************** > Class created by Charlie Chao [charlie_chao@msn.com]** > Based on Lee Brimelow's three part tutorials** on creating a 3d carousel at http://www.gotoandlearn.com/** > Current version: 1.3 [October 2007]** > Special thanks to people at FlashKit for helping me out** with this project** > Description: This class allow you to create your own** 3d carousel, which can be used for site navigation and** various other stuffs. This class is written by me based** on Lee's tutorials so people can use this in Actionscript** 3 as the original one was written in Actionscript 2.** Feel free to edit the code to match your project.*/package com.ccanvas.carousel{	import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.xml.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.*;	public class Carousel extends MovieClip {		private var speed:Number = 0;		private var xmlItem:XML = new XML();		private var urlLoader:URLLoader = new URLLoader();		private var nodes:XMLList;// xml node reader		private var itemResize:Object;//resize image		public var numOfItems:int = 0;		public var CREATED:Boolean;// check if carousel is destroyed or not		public var radiusX:int = 186;		public var radiusY:int = 75;		public var velocity:Number = 2500;// the speed of the carousel		public var tooltip;		public var container;//specify the container of the carousel				function Carousel(x:Number, y:Number, rx:int, ry:int, container:Object, itemsXML:String, itemResize:Object) {			this.x = x;			this.y = y;			radiusX = rx;			radiusY = ry;			this.container = container;			this.itemResize = itemResize;			urlLoader.load(new URLRequest(itemsXML));			urlLoader.addEventListener("complete", loaded);		}		function loaded(event:Event):void {			xmlItem = XML(urlLoader.data);			nodes = xmlItem.icon;			numOfItems = nodes.length();			for (var i:int = 0; i < numOfItems; i++) {				var source:String = nodes.attribute("image")[i];				var functions:String = nodes.attribute("function")[i];				var nAngle = i * ((Math.PI * 2)/numOfItems);				var toolText = new String(nodes.attribute("tooltip")[i]);				var title:String = nodes.attribute("title")[i];				var action:String = nodes.attribute("action")[i];				if (source.search(".mc") > 0) {					createMovieClip(i, title, source, nAngle, toolText, functions);				} else {					createImageItem(i, title, source, nAngle, toolText, functions, action);				}			}			this.addEventListener("mouseMove", interaction);			CREATED = true;		}		// Move the items		private function mover(event:Event):void {			var item = event.target;			item.x = Math.cos(item.angle) * radiusX + x;			item.y = Math.sin(item.angle) * radiusY + y;			var s:Number = item.y / (y+radiusY);			item.scaleX = item.scaleY = s;			item.angle += speed;			sortChildrenByY(this);		}		// Sorting effeciently [thanks Alexander]		private function sortChildrenByY(cont:Object):void {			var i:int;			var childList:Array = new Array();			i = cont.numChildren;			while (i--) {				childList[i] = cont.getChildAt(i);			}			childList.sortOn("y", Array.NUMERIC);			i = cont.numChildren;			while (i--) {				if (childList[i] != cont.getChildAt(i)) {					cont.setChildIndex(childList[i], i);				}			}		}		// Mouse over action -- display tooltip		private function over(event:MouseEvent):void {			var item = event.currentTarget;			setChildIndex(tooltip, numOfItems);			tooltip.tipText.text = item.toolText;			tooltip.x = item.parent.x;			tooltip.y = item.parent.y + item.parent.scaleY/item.height+tooltip.height;			item.addEventListener("enterFrame", moveTip);			tooltip.visible = true;		}		// Mouse out action -- remove tooltip		private function out(event:MouseEvent):void {			tooltip.tipText.text = "";			tooltip.visible = false;			event.currentTarget.removeEventListener("enterFrame", moveTip);		}		// Move tooltip		private function moveTip(event:Event):void {			var item = event.currentTarget;			tooltip.x = item.parent.x;			tooltip.y = item.parent.y + item.parent.scaleY/item.height+tooltip.height;		}		// Move items according to mouse		private function interaction(event:MouseEvent):void {			speed = (mouseX - x)/velocity;		}		// Create tooltip		public function addTooltip(mc:MovieClip):void {			tooltip = addChild(mc);			tooltip.visible = false;		}		// Change image/movieclip but with the same tooltip/function		public function setIcon(index:int, itemIcon:String):void {			var t = getChildByName("item"+index);			var functions:String = nodes.attribute("function")[index];			var toolText = new String(nodes.attribute("tooltip")[index]);			var action = new String(nodes.attribute("action")[index]);			var title = new String(nodes.attribute("title")[index]);			var lastAngle:Number = t.angle;			if (itemIcon.search(".mc") > 0) {				removeListeners(index);				removeChild(t);				createMovieClip(index, title, itemIcon, lastAngle, toolText, functions);			} else {				if (t.loader != undefined) {					t.loader.load(new URLRequest(itemIcon));					t.loaderReflect.load(new URLRequest(itemIcon));				} else {					var loader:Loader = new Loader();					var loaderReflect:Loader = new Loader();					removeListeners(index);					removeChild(t);					createImageItem(index, title, itemIcon, lastAngle, toolText, functions, action);				}			}		}		// Change the function of the item on mouse down		public function setFunction(index:int, itemFunction:String):void {			var t = getChildByName("item"+index);			t.base.removeEventListener("mouseDown", container[t.base.functions]);			t.base.addEventListener("mouseDown", container[itemFunction]);		}		// Change the tooltip of the item		public function setTooltip(index:int, itemTip:String):void {			var t = getChildByName("item"+index);			t.base.toolText = itemTip;		}		// Add a new item at the last index		public function addItem(itemName:String, title:String, tooltip:String, functions:String, action:String=null):void {			numOfItems++;			if (itemName.search(".mc") > 0) {				createMovieClip(numOfItems-1, title, itemName, 0, tooltip, functions);			} else {				createImageItem(numOfItems-1, title, itemName, 0, tooltip, functions, action);			}			for (var i:int = 0; i < numOfItems; i++) {				var h = getChildByName("item"+i);				h.angle = i * ((Math.PI * 2)/numOfItems);			}		}		// Swap index between two items		public function swapIndex(index1:int, index2:int) {			var j = getChildByName("item"+index1);			var k = getChildByName("item"+index2);			var jname = j.name;			j.name = k.name;			k.name = jname;			for (var i:int = 0; i < numOfItems; i++) {				var h = getChildByName("item"+(i));				h.name = "item"+i;				h.angle = i * ((Math.PI * 2)/numOfItems);			}		}		// Remove the item at index -- any items after the deleted item will be moved down		public function removeItem(index:int):void {			var t = getChildByName("item"+index);			removeListeners(index);			removeChild(t);			numOfItems--;			for (var i:int = 0; i < numOfItems; i++) {				var passed:Boolean;				if (i != index) {					if (passed == true) {						var g = getChildByName("item"+(i+1));						g.name = "item"+i;						g.angle = i * ((Math.PI * 2)/numOfItems);					} else {						var j = getChildByName("item"+i);						j.angle = i * ((Math.PI * 2)/numOfItems);					}				} else {					var h = getChildByName("item"+(i+1));					h.name = "item"+i;					h.angle = i * ((Math.PI * 2)/numOfItems);					passed = true;				}			}		}		// Get the source of the item		public function getSource(index:int):String {			var item = getChildByName("item"+index);			return item.source;		}		// Get the title of the item by index		public function getTitle(index:int):String {			var item = getChildByName("item"+index);			return item.title;		}		// Set the title of the item by index		public function setTitle(index:int, title:String):void {			var item = getChildByName("item"+index);			item.title = title;		}		// Create a new item with an external image. WARNING: For class use only!		private function createImageItem(index:Number, name:String, source:String, nAngle:Number, toolText:String, functions:String, action:String=null):void {			var n = addChild(new item);			n.loader = new Loader();			n.loaderReflect = new Loader();			n.name = "item"+index;			n.title = name;			n.angle = nAngle;			n.source = source;			n.addEventListener("enterFrame", mover);			n.loader.load(new URLRequest(source));			n.loaderReflect.load(new URLRequest(source));			n.loader.cacheAsBitmap = true;			n.loaderReflect.cacheAsBitmap = true;			n.base.addChild(n.loader);			n.ref.addChild(n.loaderReflect);			n.loader.mask = n.base.masker;			n.loaderReflect.mask = n.ref.masker;			n.base.toolText = new String(toolText);			n.base.functions = new String(functions);			n.base.action = new String(action);			n.loader.x = n.loaderReflect.x = n.base.masker.x;			n.loader.y = n.loaderReflect.y = n.base.masker.y;			if (itemResize.resize == true) {				n.loader.contentLoaderInfo.addEventListener("complete", checkContent);				n.loaderReflect.contentLoaderInfo.addEventListener("complete", checkReflection);			}			if (n.base.toolText.length > 0) {				n.base.addEventListener("mouseOver", over);				n.base.addEventListener("mouseOut", out);			}			if (functions.length > 0) {				n.base.addEventListener("mouseDown", container[functions]);			}		}		// Auto-resize item movieclip content to match the image's. WARNING: For class use only!		private function checkContent(event:Event):void {			var n = event.currentTarget.loader.parent.parent;			var l = event.currentTarget.loader;			if (itemResize.width != null && itemResize.height != null) {				l.width = itemResize.width;				l.height = itemResize.height;			}			n.base.masker.x = n.ref.masker.x = l.x = -(l.width/2);			n.base.masker.y = l.y = n.ref.masker.y = -(l.height);			n.base.masker.width = n.ref.masker.width = l.width;			n.base.masker.height = n.ref.masker.height = l.height;			n.masker.x = -(l.content.width/2);			n.masker.width = l.width;			n.masker.height = l.height;		}		private function checkReflection(event:Event):void {			var l = event.currentTarget.loader;			if (itemResize.width != null && itemResize.height != null) {				l.width = itemResize.width;				l.height = itemResize.height;			}			l.x = -(l.width/2);			l.y = -(l.height);		}		// Create a new item with an existing MovieClip. WARNING: For class use only!		private function createMovieClip(index:Number, name:String, source:String, nAngle:Number, toolText:String, functions:String):void {			var mcName:String = source.substr(0, source.search("mc")-1);			var temp:Class = getDefinitionByName(mcName) as Class;			var m = addChild(new temp);			m.name = "item"+index;			m.title = name;			m.angle = nAngle;			m.source = source;			m.addEventListener("enterFrame", mover);			m.base.toolText = new String(nodes.attribute("tooltip")[index]);			m.base.functions = new String(functions);			if (m.base.toolText.length > 0) {				m.base.addEventListener("mouseOver", over);				m.base.addEventListener("mouseOut", out);			}			if (functions.length > 0) {				m.base.addEventListener("mouseDown", container[functions]);			}		}		// Remove all listeners for the item. WARNING: For class use only!		private function removeListeners(index:int):void {			var t = getChildByName("item"+index);			var functions:String = t.base.functions;			if (t.base.toolText.length > 0) {				t.base.removeEventListener("mouseOver", over);				t.base.removeEventListener("mouseOut", out);			}			t.removeEventListener("enterFrame", mover);			if (functions.length > 0) {				t.base.removeEventListener("mouseDown", container[functions]);			}		}		// Remove all items in the carousel		public function destroy():void {			for (var i:int = 0; i <numOfItems; i++) {				var item = getChildByName("item"+i);				removeListeners(i);				removeChild(getChildByName("item"+i));			}			stage.removeEventListener("mouseMove", interaction);			removeChild(tooltip);			CREATED = false;		}	}}